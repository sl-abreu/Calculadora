/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectocalculadora;

/**
 *
 * <pre>
 * Interfaz gráfica con funcionalidad de una calculadora científica,
 * es capaz de evaluar expresiones respetando la jerarquía de operaciones
 * o el orden de los paréntesis en caso de que existan.
 * 
 * Realiza tres recorridos a la expresión, en la primera se revisa la sintaxis
 * de la expresión dada por el usuario, en caso de que sea correcta se realiza
 * el segundo recorrido, en el que se convierte la expresión de notación infija
 * a notación postfija, con el fin de hacer la posterior evaluación posible. Por
 * último, se evalúa la expresión y se muestra el valor correspondiente.
 * 
 * En caso de que la sintaxis fuera incorrecta, se muestra un mensaje apropiado
 * al usuario y no se pasa al segundo y tercer recorrido.
 * </pre>
 * @author SLGA
 */
public class CalculadoraConBotones extends javax.swing.JFrame {

    /**
     * Creates new form CalculadoraVista
     */
    public CalculadoraConBotones() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        expTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        evaluaBut = new javax.swing.JButton();
        limpBut = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        limpBut1 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        expTxt.setText("   ");

        jLabel1.setText("Expresión a evaluar:");

        evaluaBut.setText("=");
        evaluaBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluaButActionPerformed(evt);
            }
        });

        limpBut.setText("Limpiar");
        limpBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpButActionPerformed(evt);
            }
        });

        jLabel2.setText("Resultado:");

        resTxt.setEditable(false);
        jScrollPane1.setViewportView(resTxt);

        jButton1.setText("7");

        jButton2.setText("4");

        jButton3.setText("1");

        jButton4.setText("8");

        jButton5.setText("5");

        jButton6.setText("2");

        jButton7.setText("9");

        jButton8.setText("6");

        jButton9.setText("3");

        jButton10.setText("0");

        jButton11.setText(".");
        jButton11.setMaximumSize(new java.awt.Dimension(37, 32));
        jButton11.setMinimumSize(new java.awt.Dimension(37, 32));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("+");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("-");
        jButton13.setMaximumSize(new java.awt.Dimension(37, 32));
        jButton13.setMinimumSize(new java.awt.Dimension(37, 32));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("*");
        jButton14.setMaximumSize(new java.awt.Dimension(37, 32));
        jButton14.setMinimumSize(new java.awt.Dimension(37, 32));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("/");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("(");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText(")");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        limpBut1.setText("<¬");
        limpBut1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpBut1ActionPerformed(evt);
            }
        });

        jButton18.setText("^");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(evaluaBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpBut1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(limpBut, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(expTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10)
                            .addComponent(evaluaBut)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(limpBut1)
                            .addComponent(jButton18)
                            .addComponent(limpBut))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton12)
                                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jButton9)
                                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jButton15))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton17)
                                    .addComponent(jButton16)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void evaluaButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluaButActionPerformed
        String resS, exp=expTxt.getText();
                if(!exp.isEmpty() && revisaExpresion(exp)){
                    Double resD=evaluaPostFija(conviertePostFija(exp));
                    if(!resD.isNaN())
                        resS=""+resD;
                    else
                        resS="¡Valor indefinido!";
                }
                else
                    resS="Error de sintaxis, favor de revisar la expresión.";
                resTxt.setText(resS);
    }//GEN-LAST:event_evaluaButActionPerformed

    private void limpButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpButActionPerformed
        resTxt.setText("");
        expTxt.setText("");
    }//GEN-LAST:event_limpButActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void limpBut1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpBut1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limpBut1ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraConBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraConBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraConBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraConBotones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalculadoraConBotones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton evaluaBut;
    private javax.swing.JTextField expTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limpBut;
    private javax.swing.JButton limpBut1;
    private javax.swing.JTextField resTxt;
    // End of variables declaration//GEN-END:variables

    //Métodos creados
    /**
     * 
     * @param op Caracter a analizar.
     * @return <ul>
     *  <li> 1: si op es '+' o '-'
     *  <li> 2: si op es '*' o '/'
     *  <li> 3: si op es '^'
     *  <li> -1: si op es cualquier otro caracter.
     *  </ul>
     */
    public static int prioridad(char op){
        int prio;
        /*
        Se utiliza un switch (sugerido por NetBeans en lugar de if´s anidados),
        para asignar la prioridad de operadores.
        */
        switch (op) {
            case '+':
            case '-':
                prio=1;
                break;
            case '*':
            case '/':
                prio=2;
                break;
            case '^':
                prio=3;
                break;
            default:
                prio=-1;
                break;
        }
        return prio;
    }
    /**
     * 
     * @param op    Caracter a analizar.
     * @return <ul>
     *  <li> True: si op es alguno de los siguientes caracteres: <ul>
     *      <li> +
     *      <li> -
     *      <li> *
     *      <li> /
     *      <li> ^
     *      </ul>
     *  <li> False: si es cualquier otro caracter.
     *  </ul>
     */
    public static boolean esOperador(char op){
        return op=='+' || op=='-' || op=='*' || op=='/' || op=='^';
    }
    /**
     * 
     * @param exp   Expresión matemática a evaluar
     * @return <ul>
     *  <li> False: si la expresión contiene uno de los siguientes errores: <ul>
     *      <li> Operador seguido de operador (con excepción de un signo negativo)
     *      <li> Punto decimal no contenido entre dos dígitos.
     *      <li> Paréntesis desbalanceados.
     *      <li> Paréntesis vacíos.
     *      <li> Operador no seguido por un dígito o un signo negativo.
     *      <li> Falta de operador entre expresiones contenidas en paréntesis.
     *      <li> La expresión contiene letras.
     *      <li> La expresión contiene únicamente espacios.
     *      </ul>
     *  <li> True: si no presenta ninguno de los errores anteriores.
     *  </ul>
     */
    public static boolean revisaExpresion(String exp){
        PilaA<Character> verf=new PilaA();
        char aux;
        boolean res=false,banOp=false,banPun=false;
        int i=0;
        
        while(i<exp.length()-1 && exp.charAt(i)==' ')
            i++;
        aux=exp.charAt(i);
        if(Character.isDigit(aux) || aux=='(' || aux=='-'){
            verf.push(aux);
            res=true;
            i++;
            while(i<exp.length() && res){
                aux=exp.charAt(i);
                if(aux!=' '){
                    if(Character.isDigit(aux) && verf.peek()!=')'){
                        if(verf.peek()!='(')
                            verf.pop();
                        verf.push(aux);
                    }
                    else if(aux=='(' && (esOperador(verf.peek()) || verf.peek()=='(')){
                        if(verf.peek()!='(')
                            verf.pop();
                        verf.push(aux);
                    }
                    else if(esOperador(aux) && (Character.isDigit(verf.peek()) || verf.peek()==')' || (aux=='-' && !banOp && verf.peek()!='.'))){
                        banPun=false;
                        banOp=aux=='-' && verf.peek()=='-';
                        if(verf.peek()!='(')
                            verf.pop();
                        verf.push(aux);
                    }
                    else if(aux=='.' && (Character.isDigit(verf.peek()) && !banPun)){
                        banPun=true;
                        verf.pop();
                        verf.push(aux);
                    }
                    else if(aux==')' && !verf.isEmpty()){
                        char temp=verf.pop();
                        if((Character.isDigit(temp) || temp==')') && !verf.isEmpty() && verf.pop()=='('){
                            banPun=false;
                            verf.push(aux);
                        }
                        else
                            res=false;
                    }
                    else
                        res=false;
                }
                i++;
            }
            if(res && !verf.isEmpty()){
                aux=verf.pop();
                if(!verf.isEmpty() || !(Character.isDigit(aux) || aux==')'))
                    res=false;
            }  
        }
        return res;
    }
    /**
     * 
     * @param exp   Cadena a analizar
     * @param ini   Posición del paréntesis que abre.
     * @return  La posición del paréntesis que cierra, correspondiente al encontrado en la posición ini.
     */
    private static int buscaFinParentesis(String exp, int ini){
        do{
            ini++;
            if(exp.charAt(ini)=='(')
                ini=buscaFinParentesis(exp,ini);
        }while(exp.charAt(ini)!=')');
        ini++;
        return ini;
    }
    /**
     * 
     * @param exp   Cadena (expresión matemática) a convertir.
     * @return  Un arreglo de String que contiene el equivalente a la expresión en notación postfija, marcando el final de la expresión con un ";".
     */
    public static String[] conviertePostFija(String exp){
        String[] auxArr, postFija=new String[exp.length()+1];
        PilaA<Character> opers=new PilaA();
        int i=0,j=0,auxI;
        char temp;
        
        while(i<exp.length()-1 && exp.charAt(i)==' ')
            i++;
        if(exp.charAt(i)=='-'){
            postFija[0]="-";
            i++;
        }
        while(i<exp.length()){
            temp=exp.charAt(i);
            if(Character.isDigit(temp)){
                auxI=i;
                i++;
                while(i<exp.length() && (Character.isDigit(exp.charAt(i)) || exp.charAt(i)=='.'))
                    i++;
                if(postFija[j]!=null)
                    postFija[j]+=exp.substring(auxI, i);
                else
                    postFija[j]=exp.substring(auxI, i);
                j++;
            }
            else if(esOperador(temp)){
                while(!opers.isEmpty() && prioridad(temp)<=prioridad(opers.peek())){
                    postFija[j]=""+opers.pop();
                    j++;
                }
                opers.push(temp);
                i++;
                /*
                En caso de que haya un número negativo después del operador
                leído, se usa un while para saltar los posibles espacios
                intermedios y agregar dicho signo al inicio del siguiente
                elemento del arreglo postFija.
                */
                while(exp.charAt(i)==' ')
                    i++;
                if(exp.charAt(i)=='-'){
                    postFija[j]="-";
                    i++;
                }
            }
            /*
            En caso de que se lea un '(', se busca el ')' correspondiente,
            y se llama de manera recursiva este método para que convierta
            la expresión contenida dentro de los paréntesis con el método
            substring de la clase String.
             */
            else if(temp=='('){
                int k=0;
                auxI=i;
                i=buscaFinParentesis(exp,auxI);
                auxArr=conviertePostFija(exp.substring(auxI+1, i-1));
                while(!auxArr[k].equals(";")){
                    postFija[j]=auxArr[k];
                    j++;
                    k++;
                }
            }
            else if(temp==' ')
                i++;
        }
        while(!opers.isEmpty()){
            postFija[j]=""+opers.pop();
            j++;
        }
        postFija[j]=";";
        return postFija;
    }
    /**
     * 
     * @param postFija  Arreglo de String que contiene la expresión a evaluar en notación postfija.
     * @return Un double equivalente a la expresión dada.
     */
    public static double evaluaPostFija(String[] postFija){
        PilaA<Double> calcs=new PilaA();
        String temp;
        double num1,num2,res;
        int i=0;
        
        while(!postFija[i].equals(";")){
            temp=postFija[i];
            if(temp.length()==1 && esOperador(temp.charAt(0))){
                num2=calcs.pop();
                num1=calcs.pop();
                switch(temp.charAt(0)){
                    case '+':
                        calcs.push(num1+num2);
                        break;
                    case '-':
                        calcs.push(num1-num2);
                        break;
                    case '*':
                        calcs.push(num1*num2);
                        break;
                    case '/':
                        /*
                        No es necesario revisar si num2==0, pues
                        la clase Double lo hace de manera
                        predeterminada, y asigna un NaN (Not-a-Number)
                        en caso de 0/0, y un valor infinito en el 
                        caso de a/0 con a!=0.
                        */
                        calcs.push(num1/num2);
                        break;
                    case '^':
                        calcs.push(Math.pow(num1, num2));
                        break;
                }
            }
            else{
                calcs.push(Double.parseDouble(temp));
            }
            i++;
        }
        res=calcs.pop();
        if(!calcs.isEmpty())
            res=Double.NaN;
        return res;
    }
}
